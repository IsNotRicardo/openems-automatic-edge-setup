import {chromium, Browser, Page, BrowserContext, Locator} from '@playwright/test';
import { openEmsUsername, openEmsPassword, openEmsConsole, websocketUrl, ports, portsAndKeys } from './common';

// --- Selectors generated by Playwright Codegen ---
const COMPONENT_LOCATOR = (page: Page): Locator => page.getByRole('cell', { name: 'Controller Api Backend' });
const API_KEY_FIELD_LOCATOR = (page: Page): Locator => page.locator('input[name="apikey"]');
const WEBSOCKET_FIELD_LOCATOR = (page: Page):Locator => page.locator('textarea[name="uri"]');
const SAVE_BUTTON_LOCATOR = (page: Page): Locator => page.getByRole('button', { name: 'Save' });

async function automateConfiguration(): Promise<void> {
    let browser: Browser | undefined;
    try {
        browser = await chromium.launch({
            headless: true,
        });

        const context: BrowserContext = await browser.newContext();

        for (const port of ports) {
            const apiKey: string = portsAndKeys[port];
            const url = `http://${openEmsUsername}:${openEmsPassword}@localhost:${port}${openEmsConsole}`;
            console.log(`\n--- Processing ${url} ---`);

            let page: Page | undefined;
            try {
                page = await context.newPage();
                await page.goto(url, { waitUntil: 'domcontentloaded' });

                // 1. Click the specific component (Controller Api Backend)
                const componentElement: Locator = COMPONENT_LOCATOR(page);
                await componentElement.waitFor({ state: 'visible', timeout: 10000 });
                await componentElement.click();
                console.log(`Clicked 'Controller Api Backend' component on port ${port}`);

                // 2. Insert API key
                const apiKeyField: Locator = API_KEY_FIELD_LOCATOR(page);
                await apiKeyField.waitFor({ state: 'visible', timeout: 10000 });
                await apiKeyField.fill(apiKey);
                console.log(`Filled API Key for port ${port}`);

                // 3. Insert WebSocket URL
                const websocketField: Locator = WEBSOCKET_FIELD_LOCATOR(page);
                await websocketField.waitFor({ state: 'visible', timeout: 10000 });
                await websocketField.fill(websocketUrl!);
                console.log(`Filled WebSocket URL for port ${port}`);

                // 4. Click the Save button
                const saveButton: Locator = SAVE_BUTTON_LOCATOR(page);
                await saveButton.waitFor({ state: 'visible', timeout: 10000 });
                await saveButton.click();
                await page.waitForLoadState('networkidle');

                console.log(`Successfully configured and saved settings for port ${port}`);

            } catch (pageError: any) {
                console.error(`Error during page interaction for port ${port}:`, pageError.message);
            } finally {
                if (page && !page.isClosed()) {
                    await page.close();
                }
            }
        }
    } catch (browserError: any) {
        console.error("Fatal error during browser launch or context creation:", browserError.message);
    } finally {
        if (browser) {
            await browser.close();
            console.log("Browser closed. Automation complete.");
        }
    }
}

automateConfiguration();
